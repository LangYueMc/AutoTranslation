plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfigs = [
                "autotranslation-common.mixins.json",
                "autotranslation.mixins.json"
        ]
    }
    runs {
        client {
            property 'mixin.debug', 'true' // Tells forge to have debug on for Mixins
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    modApi "me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}"

    common(project(path: ":common", configuration: "namedElements")) {
        transitive = false
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "me.shedaniel.cloth")
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

version = "${rootProject.mod_version}+mc${rootProject.minecraft_version}-forge"

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": rootProject.mod_version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

task copy(type: Copy) {
    from "${project.buildDir}/libs"
    into "${rootProject.buildDir}/libs"
    dependsOn remapJar
}

build.finalizedBy(copy)

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

def CURSEFORGE_TOKEN = System.getenv("CURSEFORGE_TOKEN")
if (CURSEFORGE_TOKEN) {
    curseforge {
        apiKey = CURSEFORGE_TOKEN
        project {
            id = rootProject.curseforge_id
            releaseType = rootProject.version_type
            changelogType = 'markdown'
            changelog = rootProject.ext.v_changelog
            addGameVersion "Forge"
            addGameVersion "Java 17"
            gameVersionStrings.addAll(rootProject.ext.gameVersionsList)
            mainArtifact remapJar
            relations {
                for (final def required in rootProject.ext.requiredProjectForge) {
                    if (required.toString().trim().length() > 0)
                        requiredDependency required
                }
            }
        }
    }
    rootProject.tasks.getByName("curseforge").dependsOn tasks.getByName("curseforge")
}

def MODRINTH_TOKEN = System.getenv("MODRINTH_TOKEN")
if (MODRINTH_TOKEN) {
    modrinth {
        token = MODRINTH_TOKEN
        projectId = rootProject.modrinth_id
        versionNumber = rootProject.mod_version
        versionType = rootProject.version_type
        versionName = "${rootProject.archives_base_name} ${rootProject.mod_version} Forge"
        uploadFile = remapJar
        gameVersions.addAll(rootProject.ext.gameVersionsList)
        loaders = ['forge']
        changelog = rootProject.ext.v_changelog
        dependencies {
            for (final def required_project in rootProject.ext.requiredProjectForge) {
                if (required_project.toString().trim().length() > 0)
                    required.project required_project
            }
        }
    }
    rootProject.tasks.getByName("modrinth").dependsOn tasks.getByName("modrinth")
}

